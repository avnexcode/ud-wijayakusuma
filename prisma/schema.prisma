generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum LoginProvider {
    CREDENTIALS
}

model User {
    id       String        @id
    name     String        @db.VarChar(100)
    email    String        @unique @db.VarChar(150)
    provider LoginProvider @default(CREDENTIALS)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@index([name])
    @@index([email])
    @@index([createdAt])
    @@map("users")
}

model Customer {
    id      String  @id @default(cuid())
    name    String  @unique @db.VarChar(150)
    email   String? @unique @db.VarChar(150)
    address String  @db.VarChar(255)
    phone   String  @unique @db.VarChar(20)
    orders  Order[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@index([name])
    @@index([email])
    @@index([createdAt])
    @@map("customers")
}

model Product {
    id            String        @id @default(cuid())
    name          String        @db.VarChar(150)
    slug          String        @unique
    price         String        @db.VarChar(50)
    description   String?       @db.Text
    orderCategory OrderCategory @map("order_category")

    categoryId String   @map("category_id")
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    orders Order[]

    @@index([name])
    @@index([categoryId])
    @@index([createdAt])
    @@map("products")
}

model Category {
    id          String  @id @default(cuid())
    name        String  @unique @db.VarChar(150)
    slug        String  @unique
    description String? @db.Text

    products Product[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@index([name])
    @@index([createdAt])
    @@map("categories")
}

enum OrderStatus {
    PENDING
    SUCCESS
}

enum OrderCategory {
    WHOLESALE // grosir
    RETAIL // ecer
}

enum Discount {
    NONE
    PERCENTAGE
    NOMINAL
}

model Order {
    id            String        @id @default(cuid())
    label         String        @unique @db.VarChar(100)
    description   String?       @db.Text
    total         String        @db.VarChar(50)
    status        OrderStatus   @default(PENDING)
    category      OrderCategory @default(RETAIL)
    sendingAt     DateTime      @map("sending_at")
    discount      Discount?
    totalDiscount String?       @map("total_discount")

    customerId    String       @map("customer_id")
    productId     String       @map("product_id")
    transactionId String?      @map("transaction_id")
    customer      Customer     @relation(fields: [customerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    product       Product      @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    transaction   Transaction?

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@index([label])
    @@index([status])
    @@index([category])
    @@index([sendingAt])
    @@index([customerId])
    @@index([productId])
    @@index([transactionId])
    @@index([createdAt])
    @@map("orders")
}

enum TransactionStatus {
    UNPAID
    PARTIALLY_PAID
    PAID
}

model Transaction {
    id          String            @id @default(cuid())
    totalAmount String            @map("total_amount")
    amount      String
    amountPaid  String?           @map("amount_paid")
    amountDue   String?           @map("amount_due")
    status      TransactionStatus @default(UNPAID)

    orderId         String          @unique @map("order_id")
    order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    payment_records PaymentRecord[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@index([orderId])
    @@index([createdAt])
    @@map("transactions")
}

model PaymentRecord {
    id            String @id @default(cuid())
    amount        String
    noteImageName String @map("note_image_name")
    noteImageUrl  String @map("note_image_url")

    transactionId String      @map("transaction_id")
    transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("payment_records")
}
